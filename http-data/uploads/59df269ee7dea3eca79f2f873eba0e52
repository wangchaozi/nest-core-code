import os
import sys
import cv2
import numpy as np
from concurrent.futures import ThreadPoolExecutor
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from ultralytics import YOLO
from PyQt5.QtCore import pyqtSlot

# 修复Linux环境变量问题
if "XDG_RUNTIME_DIR" not in os.environ:
    os.environ["XDG_RUNTIME_DIR"] = f"/tmp/runtime-{os.getuid()}"
    os.makedirs(os.environ["XDG_RUNTIME_DIR"], exist_ok=True)


class DetectionThread(QThread):
    finished = pyqtSignal(list)
    progress = pyqtSignal(int)

    def __init__(self, model, image_paths):
        super().__init__()
        self.model = model
        self.image_paths = image_paths

    def run(self):
        results = []
        try:
            for i, path in enumerate(self.image_paths):
                result = self.model.predict(path, conf=0.5, save=False, verbose=False)[0]
                results.append((path, result))
                self.progress.emit(int((i + 1) / len(self.image_paths) * 100))
        except Exception as e:
            print(f"检测错误: {str(e)}")
        finally:
            self.finished.emit(results)


class ImageLoader(QRunnable):
    class Signals(QObject):
        loaded = pyqtSignal(int, QImage, QImage)  # 索引, 原图, 缩略图
        error = pyqtSignal(int, str)

    def __init__(self, path, index):
        super().__init__()
        self.path = path
        self.index = index
        self.signals = self.Signals()

    def run(self):
        try:
            # 使用深拷贝避免内存问题
            img = cv2.imread(self.path)
            if img is None:
                raise ValueError("无效的图片文件")

            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            h, w, ch = img.shape
            img_data = np.ascontiguousarray(img.copy())  # 创建深拷贝

            # 生成QImage对象
            qimg = QImage(img_data.data, w, h, ch * w, QImage.Format_RGB888)
            thumbnail = qimg.scaled(100, 100, Qt.KeepAspectRatio, Qt.SmoothTransformation)

            self.signals.loaded.emit(self.index, qimg.copy(), thumbnail.copy())
        except Exception as e:
            self.signals.error.emit(self.index, str(e))


class CrackDetectionApp(QMainWindow):
    def __init__(self):
        super().__init__()
        try:
            self.model = YOLO('./best.pt')
        except Exception as e:
            QMessageBox.critical(self, '模型加载失败', f'无法加载模型: {str(e)}')
            sys.exit(1)

        # 初始化数据
        self.image_paths = []
        self.original_images = []
        self.result_images = []
        self.original_thumbs = []
        self.result_thumbs = []
        self.current_index = 0
        self.show_mode = "original"
        self.thread_pool = ThreadPoolExecutor(max_workers=4)
        self.failed_loads = set()
        self.scroll_pos = 0

        self.init_ui()
        self.init_animations()

    def init_ui(self):
        self.setWindowTitle('智能裂缝检测系统')
        self.setGeometry(100, 100, 1280, 800)
        self.setStyleSheet("""
            QMainWindow { background-color: #2E2E2E; }
            QLabel { color: white; }
            QPushButton {
                background-color: #4CAF50;
                border: none;
                color: white;
                padding: 8px 16px;
                font-size: 14px;
                border-radius: 5px;
            }
            QPushButton:hover { background-color: #45a049; }
            QListWidget {
                background-color: #404040;
                color: white;
                border-radius: 5px;
                padding: 5px;
                outline: none;
            }
            QListWidget::item {
                padding: 8px;
                border-bottom: 1px solid #555;
            }
            QListWidget::item:selected { 
                background-color: #4CAF5050; 
                border-left: 3px solid #4CAF50;
            }
        """)

        # 主布局
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        main_layout = QHBoxLayout(main_widget)

        # 左侧显示区域
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)

        # 主图显示
        self.image_label = QLabel()
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setStyleSheet("background-color: #404040; border-radius: 10px; padding: 10px;")
        left_layout.addWidget(self.image_label)

        # 控制面板
        control_widget = QWidget()
        control_layout = QHBoxLayout(control_widget)

        self.prev_btn = QPushButton("← 上一张")
        self.next_btn = QPushButton("下一张 →")
        self.mode_btn = QPushButton("切换到检测结果")

        self.prev_btn.clicked.connect(self.show_prev)
        self.next_btn.clicked.connect(self.show_next)
        self.mode_btn.clicked.connect(self.toggle_mode)

        control_layout.addWidget(self.prev_btn)
        control_layout.addWidget(self.next_btn)
        control_layout.addWidget(self.mode_btn)
        left_layout.addWidget(control_widget)

        # 右侧面板
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)

        # 上传按钮
        upload_btn = QPushButton('📁 上传图片')
        upload_btn.clicked.connect(self.upload_images)
        right_layout.addWidget(upload_btn)

        # 缩略图列表
        self.thumbnail_list = QListWidget()
        self.thumbnail_list.setIconSize(QSize(100, 100))
        self.thumbnail_list.itemClicked.connect(self.on_thumbnail_click)
        self.thumbnail_list.verticalScrollBar().valueChanged.connect(self.handle_scroll)

        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setWidget(self.thumbnail_list)
        right_layout.addWidget(scroll)

        # 进度条
        self.progress_bar = QProgressBar()
        self.progress_bar.setTextVisible(False)
        self.progress_bar.setStyleSheet("""
            QProgressBar { height: 6px; border-radius: 3px; background: #555; }
            QProgressBar::chunk { background: #4CAF50; border-radius: 3px; }
        """)
        right_layout.addWidget(self.progress_bar)

        # 操作按钮
        btn_widget = QWidget()
        btn_layout = QVBoxLayout(btn_widget)

        self.detect_btn = QPushButton('🔍 开始检测')
        self.save_btn = QPushButton('💾 保存当前')
        self.compare_btn = QPushButton('🔄 对比视图')
        self.batch_save_btn = QPushButton('💾 批量保存')

        self.detect_btn.clicked.connect(self.start_detection)
        self.save_btn.clicked.connect(self.save_current)
        self.compare_btn.clicked.connect(self.show_compare)
        self.batch_save_btn.clicked.connect(self.add_batch_save)

        btn_layout.addWidget(self.detect_btn)
        btn_layout.addWidget(self.save_btn)
        btn_layout.addWidget(self.compare_btn)
        btn_layout.addWidget(self.batch_save_btn)
        right_layout.addWidget(btn_widget)

        # 布局分配
        main_layout.addWidget(left_widget, 70)
        main_layout.addWidget(right_widget, 30)

        self.update_ui_state()

    def init_animations(self):
        """初始化动画效果"""
        self.thumbnail_list.setProperty("opacity", 1.0)
        self.fade_animation = QPropertyAnimation(self.thumbnail_list, b"opacity")
        self.fade_animation.setDuration(300)

        self.scroll_animation = QPropertyAnimation(self.thumbnail_list.verticalScrollBar(), b"value")
        self.scroll_animation.setDuration(500)
        self.scroll_animation.setEasingCurve(QEasingCurve.OutQuad)

    def handle_scroll(self, value):
        """处理滚动事件实现虚拟列表"""
        if abs(value - self.scroll_pos) > 100:
            self.update_thumbnails()
        self.scroll_pos = value

    def update_ui_state(self):
        """更新界面元素状态"""
        has_images = len(self.image_paths) > 0
        has_results = len(self.result_images) > 0

        self.detect_btn.setEnabled(has_images)
        self.save_btn.setEnabled(has_images)
        self.compare_btn.setEnabled(has_results)
        self.mode_btn.setEnabled(has_results)

        if has_results:
            self.mode_btn.setText("切换到检测结果" if self.show_mode == "original" else "切换到原始图片")

    def upload_images(self):
        """异步上传图片"""
        paths, _ = QFileDialog.getOpenFileNames(self, '选择图片', '', '图片文件 (*.jpg *.jpeg *.png)')
        if not paths:
            return

        # 重置状态
        self.image_paths = paths
        self.original_images = [None] * len(paths)
        self.original_thumbs = [None] * len(paths)
        self.result_images = []
        self.result_thumbs = []
        self.failed_loads.clear()

        # 初始化缩略图列表
        self.thumbnail_list.clear()
        for idx in range(len(paths)):
            item = QListWidgetItem(QIcon(":/icons/loading.png"), "加载中...")
            self.thumbnail_list.insertItem(idx, item)

        # 启动异步加载
        for idx, path in enumerate(paths):
            loader = ImageLoader(path, idx)
            loader.signals.loaded.connect(self.handle_image_loaded)
            loader.signals.error.connect(self.handle_image_error)
            self.thread_pool.submit(loader.run)

        self.show_mode = "original"
        self.current_index = 0
        self.update_ui_state()

    @pyqtSlot(int, QImage, QImage)
    def handle_image_loaded(self, index, qimg, thumbnail):
        """在主线程处理图像加载"""
        try:
            # 转换为QPixmap
            pixmap = QPixmap.fromImage(qimg)
            thumb = QPixmap.fromImage(thumbnail)

            # 更新数据
            self.original_images[index] = pixmap
            self.original_thumbs[index] = thumb

            # 更新缩略图显示
            if self.thumbnail_list.count() > index:
                item = self.thumbnail_list.item(index)
                item.setIcon(QIcon(thumb))
                item.setText(f"📷 {self.get_filename(index)}")

            # 显示当前图片
            if index == self.current_index:
                self.display_current()
        except Exception as e:
            print(f"图像处理失败: {str(e)}")

    @pyqtSlot(int, str)
    def handle_image_error(self, index, error_msg):
        """处理加载错误"""
        self.failed_loads.add(index)
        print(f"图片加载失败: index={index}, error={error_msg}")

        # 更新缩略图显示
        if self.thumbnail_list.count() > index:
            item = self.thumbnail_list.item(index)
            item.setIcon(QIcon(":/icons/error.png"))
            item.setText(f"❌ 加载失败")

    def update_thumbnails(self):
        """优化后的虚拟列表实现"""
        # 获取当前可见范围
        scroll_bar = self.thumbnail_list.verticalScrollBar()
        start_idx = max(0, scroll_bar.value() // 110 - 2)
        end_idx = min(len(self.image_paths), start_idx + (self.thumbnail_list.height() // 110) + 4)

        # 更新可见项
        for idx in range(start_idx, end_idx):
            if 0 <= idx < len(self.original_thumbs):
                status = "✅" if self.show_mode == "results" else "📷"
                if self.original_thumbs[idx]:
                    thumb = self.original_thumbs[idx]
                    text = f"{status} {self.get_filename(idx)}"
                else:
                    thumb = QPixmap(":/icons/loading.png")
                    text = "加载中..." if idx not in self.failed_loads else "❌ 加载失败"

                if idx >= self.thumbnail_list.count():
                    item = QListWidgetItem()
                    self.thumbnail_list.insertItem(idx, item)
                else:
                    item = self.thumbnail_list.item(idx)

                item.setIcon(QIcon(thumb))
                item.setText(text)

        # 高亮当前项
        if 0 <= self.current_index < self.thumbnail_list.count():
            self.thumbnail_list.setCurrentRow(self.current_index)

    # ...（其他方法保持不变，包括start_detection, process_result, save_current等）...
    def display_current(self):
        """显示当前图片"""
        if self.show_mode == "original":
            pixmap = self.original_images[self.current_index] if self.current_index < len(
                self.original_images) else None
        else:
            pixmap = self.result_images[self.current_index] if self.current_index < len(self.result_images) else None

        if pixmap:
            scaled = pixmap.scaled(
                self.image_label.width() - 20,
                self.image_label.height() - 20,
                Qt.KeepAspectRatio,
                Qt.SmoothTransformation
            )
            self.image_label.setPixmap(scaled)

    def get_filename(self, index):
        """获取带序号的文件名"""
        if 0 <= index < len(self.image_paths):
            base = os.path.basename(self.image_paths[index])
            return f"{index + 1}. {base}"
        return "未知文件"

    def on_thumbnail_click(self, item):
        index = self.thumbnail_list.row(item)  # 正确获取列表项的索引
        if 0 <= index < len(self.image_paths):
            self.current_index = index
            self.display_current()
            self.highlight_current_item()

    def add_batch_save(self):
        """批量保存功能（修复标题和显示问题）"""
        if not self.result_images:
            QMessageBox.warning(self, "提示", "请先完成检测")
            return

        # 修复1：设置正确的对话框标题
        save_dir = QFileDialog.getExistingDirectory(
            self,
            "选择保存目录 - 批量保存",  # 修改对话框标题
            options=QFileDialog.ShowDirsOnly
        )
        if not save_dir:
            return

        # 修复2：创建无干扰的进度对话框
        progress = QProgressDialog(
            "正在批量保存...",
            "取消",
            0,
            len(self.result_images),
            self
        )
        progress.setWindowTitle("批量保存进度")  # 设置进度窗口标题
        progress.setWindowModality(Qt.WindowModal)
        progress.setMinimumDuration(0)  # 立即显示进度条

        # 修复3：禁用主窗口交互防止刷新
        self.setEnabled(False)

        try:
            for idx, pixmap in enumerate(self.result_images):
                if progress.wasCanceled():
                    break

                # 修复4：不触发任何界面更新
                path = os.path.join(save_dir, f"result_{idx + 1}.png")

                # 使用后台线程保存（避免界面冻结）
                with ThreadPoolExecutor(max_workers=1) as executor:
                    future = executor.submit(pixmap.save, path, quality=100)
                    while not future.done():
                        QApplication.processEvents()  # 保持响应

                progress.setValue(idx + 1)

            # 修复5：完成提示包含详细信息
            QMessageBox.information(
                self,
                "批量保存完成",  # 修改完成提示标题
                f"成功保存 {progress.value()} 张图片到：\n{save_dir}"
            )
        except Exception as e:
            QMessageBox.critical(
                self,
                "保存错误",
                f"批量保存失败：{str(e)}"
            )
        finally:
            self.setEnabled(True)
            progress.close()

    def start_detection(self):
        """开始检测"""
        if not self.image_paths:
            return

        self.thread = DetectionThread(self.model, self.image_paths)
        self.thread.finished.connect(self.on_detection_finish)
        self.thread.progress.connect(self.progress_bar.setValue)
        self.thread.start()
        self.detect_btn.setEnabled(False)

    def on_detection_finish(self, results):
        """检测完成处理"""
        self.result_images.clear()

        try:
            for path, result in results:
                # 处理结果图像
                plot_img = result.plot()
                rgb_img = cv2.cvtColor(plot_img, cv2.COLOR_BGR2RGB)

                # 转换为QPixmap
                h, w, ch = rgb_img.shape
                bytes_line = ch * w
                qimg = QImage(rgb_img.data, w, h, bytes_line, QImage.Format_RGB888)
                self.result_images.append(QPixmap.fromImage(qimg))

            self.process_result(results)
            self.show_mode = "original"
            self.update_ui_state()

            if len(self.result_images) > 0:
                QMessageBox.information(self, "完成", f"成功检测 {len(self.result_images)} 张图片")
            else:
                QMessageBox.warning(self, "警告", "未生成有效检测结果")

        except Exception as e:
            QMessageBox.critical(self, "错误", f"结果处理失败: {str(e)}")
        finally:
            self.progress_bar.setValue(0)
            self.detect_btn.setEnabled(True)

    def toggle_mode(self):
        """切换显示模式时更新缩略图"""
        if not self.result_images:
            QMessageBox.warning(self, "提示", "请先完成检测")
            return

        self.show_mode = "results" if self.show_mode == "original" else "original"
        self.display_current()
        self.update_ui_state()
        # 新增：切换模式时更新缩略图列表
        self.update_thumbnails()

    def update_thumbnails(self):
        """优化后的虚拟列表实现（修复问题1）"""
        # 获取当前可见范围
        scroll_bar = self.thumbnail_list.verticalScrollBar()
        start_idx = max(0, scroll_bar.value() // 110 - 2)
        end_idx = min(len(self.image_paths), start_idx + (self.thumbnail_list.height() // 110) + 4)

        # 更新可见项
        for idx in range(start_idx, end_idx):
            if 0 <= idx < len(self.original_thumbs):
                # 根据显示模式选择缩略图（新增部分）
                if self.show_mode == "results" and idx < len(self.result_thumbs):
                    thumb = self.result_thumbs[idx]
                    status = "✅"
                else:
                    thumb = self.original_thumbs[idx]
                    status = "📷"

                # 生成显示文本
                if thumb:
                    text = f"{status} {self.get_filename(idx)}"
                else:
                    thumb = QPixmap(":/icons/loading.png")
                    text = "加载中..." if idx not in self.failed_loads else "❌ 加载失败"

                # 更新列表项
                if idx >= self.thumbnail_list.count():
                    item = QListWidgetItem()
                    self.thumbnail_list.insertItem(idx, item)
                else:
                    item = self.thumbnail_list.item(idx)

                item.setIcon(QIcon(thumb))
                item.setText(text)

        # 高亮当前项
        if 0 <= self.current_index < self.thumbnail_list.count():
            self.thumbnail_list.setCurrentRow(self.current_index)

    def process_result(self, results):
        """处理检测结果时生成结果缩略图"""
        self.result_thumbs = []
        for pixmap in self.result_images:
            thumb = pixmap.scaled(100, 100, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            self.result_thumbs.append(thumb)

    def show_prev(self):
        """显示上一张并更新对比视图"""
        max_index = len(self.image_paths)
        if max_index == 0:
            return

        self.current_index = (self.current_index - 1) % max_index
        self.display_current()
        self.highlight_current_item()

        # 更新对比视图
        if hasattr(self, 'compare_win') and self.compare_win.isVisible():
            self.update_compare_display()

    def show_next(self):
        """显示下一张并更新对比视图"""
        max_index = len(self.image_paths)
        if max_index == 0:
            return

        self.current_index = (self.current_index + 1) % max_index
        self.display_current()
        self.highlight_current_item()

        # 更新对比视图
        if hasattr(self, 'compare_win') and self.compare_win.isVisible():
            self.update_compare_display()

    def highlight_current_item(self):
        """修复：高亮当前列表项"""
        if 0 <= self.current_index < self.thumbnail_list.count():
            item = self.thumbnail_list.item(self.current_index)
            item.setSelected(True)
            self.thumbnail_list.scrollToItem(item, QAbstractItemView.PositionAtCenter)

    def save_current(self):
        """保存当前显示的内容"""
        if self.show_mode == "original":
            pixmap = self.original_images[self.current_index]
            default_name = f"原始_{self.current_index + 1}.jpg"
        else:
            pixmap = self.result_images[self.current_index]
            default_name = f"结果_{self.current_index + 1}.jpg"

        path, _ = QFileDialog.getSaveFileName(
            self, "保存图片",
            default_name,
            "JPEG文件 (*.jpg);;PNG文件 (*.png)"
        )

        if path and pixmap:
            if not pixmap.save(path):
                QMessageBox.warning(self, "错误", "保存失败，请检查文件路径和权限")

    def show_compare(self):
        """显示对比视图"""
        if len(self.result_images) == 0:
            return

        # 关闭已存在的对比窗口
        if hasattr(self, 'compare_win') and self.compare_win:
            self.compare_win.close()

        # 创建对比窗口
        self.compare_win = QMainWindow(self)
        self.compare_win.setWindowTitle("对比视图")
        self.compare_win.resize(1280, 600)

        # 主布局
        central_widget = QWidget()
        self.compare_win.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        # 图片显示区域
        image_widget = QWidget()
        image_layout = QHBoxLayout(image_widget)
        self.original_compare_label = QLabel()
        self.result_compare_label = QLabel()
        image_layout.addWidget(self.original_compare_label)
        image_layout.addWidget(QLabel("→"))
        image_layout.addWidget(self.result_compare_label)
        layout.addWidget(image_widget)

        # 控制按钮
        control_widget = QWidget()
        control_layout = QHBoxLayout(control_widget)
        self.compare_prev_btn = QPushButton("← 上一张")
        self.compare_next_btn = QPushButton("下一张 →")
        control_layout.addWidget(self.compare_prev_btn)
        control_layout.addWidget(self.compare_next_btn)
        layout.addWidget(control_widget)

        # 连接信号
        self.compare_prev_btn.clicked.connect(self.show_prev)
        self.compare_next_btn.clicked.connect(self.show_next)

        # 初始显示
        self.update_compare_display()
        self.compare_win.show()
        self.compare_win.destroyed.connect(lambda: self.cleanup_compare_window())

    def cleanup_compare_window(self):
        """清理对比窗口资源"""
        if hasattr(self, 'compare_win'):
            del self.compare_win

    def update_compare_display(self):
        """更新对比视图中的图片显示（修复问题2）"""
        if not hasattr(self, 'compare_win') or not self.compare_win:
            return

        # 获取当前图片
        original_pix = self.original_images[self.current_index]
        result_pix = self.result_images[self.current_index]

        # 使用固定尺寸进行缩放（修复尺寸递减问题）
        target_width = 600  # 固定宽度
        target_height = 600  # 固定高度

        # 计算保持比例的缩放
        scaled_original = original_pix.scaled(
            target_width, target_height,
            Qt.KeepAspectRatio,
            Qt.SmoothTransformation
        )
        scaled_result = result_pix.scaled(
            target_width, target_height,
            Qt.KeepAspectRatio,
            Qt.SmoothTransformation
        )

        # 更新显示
        self.original_compare_label.setPixmap(scaled_original)
        self.result_compare_label.setPixmap(scaled_result)

    def resizeEvent(self, event):
        self.display_current()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    try:
        window = CrackDetectionApp()
        window.show()
        sys.exit(app.exec_())
    except Exception as e:
        QMessageBox.critical(None, "错误", f"程序启动失败: {str(e)}")



 # 模拟摄像头控制区域
        camera_widget = QWidget()
        camera_layout = QVBoxLayout(camera_widget)
        self.camera_label = QLabel()
        self.camera_label.setStyleSheet("background-color: #404040; border-radius: 10px; padding: 10px;")
        self.start_camera_btn = QPushButton("📷 启动摄像头")
        self.stop_camera_btn = QPushButton("🛑 停止摄像头")
        self.start_camera_btn.clicked.connect(self.start_camera_detection)
        self.stop_camera_btn.clicked.connect(self.stop_camera_detection)
        self.stop_camera_btn.setEnabled(False)
        camera_layout.addWidget(self.camera_label)
        camera_layout.addWidget(self.start_camera_btn)
        camera_layout.addWidget(self.stop_camera_btn)
        left_layout.addWidget(camera_widget)